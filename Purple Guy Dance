
local Animate = game.Players.LocalPlayer.Character.Animate
HumanDied = false
local count = 1
function Align(Part0, Part1, Position, Angle)
	local AlignPos = Instance.new('AlignPosition', Part1);
	AlignPos.Name = "AliP_" .. count
	AlignPos.ApplyAtCenterOfMass = true;
	AlignPos.MaxForce = 5772000--67752;
	AlignPos.MaxVelocity = math.huge / 9e110;
	AlignPos.ReactionForceEnabled = false;
	AlignPos.Responsiveness = 200;
	AlignPos.RigidityEnabled = false;
	local AlignOri = Instance.new('AlignOrientation', Part1);
	AlignOri.Name = "AliO_" .. count
	AlignOri.MaxAngularVelocity = math.huge / 9e110;
	AlignOri.MaxTorque = 5772000
	AlignOri.PrimaryAxisOnly = false;
	AlignOri.ReactionTorqueEnabled = false;
	AlignOri.Responsiveness = 200;
	AlignOri.RigidityEnabled = false;
	local AttachmentA = Instance.new('Attachment', Part1);
	AttachmentA.Name = "Ath_" .. count
	local AttachmentB = Instance.new('Attachment', Part0);
	AttachmentB.Name = "Ath_" .. count
	AttachmentA.Orientation = Angle or Vector3.new(0, 0, 0)
	AttachmentA.Position = Position or Vector3.new(0, 0, 0)
	AlignPos.Attachment1 = AttachmentA;
	AlignPos.Attachment0 = AttachmentB;
	AlignOri.Attachment1 = AttachmentA;
	AlignOri.Attachment0 = AttachmentB;
	count = count + 1
	spawn(function()
		while wait() do
			Part0.RotVelocity = Vector3.new(0, 0, 0)
			Part0.Velocity = Vector3.new(30, 0, 0)
			Part0.AssemblyLinearVelocity = -Part0.Velocity
		end
	end)
	game:GetService("RunService").Stepped:Connect(function()
		for _, v in pairs(game:GetService("Players").LocalPlayer.Character:GetChildren()) do
			if v:IsA("Part") then
				v.CanCollide = false
			end
			if v:IsA("Accessory") then
				v.Handle.CanCollide = false
			end
		end
	end)
	return {
		AlignPos,
		AlignOri,
		AttachmentA,
		AttachmentB
	}
end
if _G.netted ~= true then
	_G.netted = true
	coroutine.wrap(function()
		settings().Physics.PhysicsEnvironmentalThrottle = Enum.EnviromentalPhysicsThrottle.Disabled
		settings().Physics.AllowSleep = false
	end)()
end
game:FindFirstChildOfClass("Players").LocalPlayer["Character"].Archivable = true
local hatnameclone = {}
for _, v in next, game:FindFirstChildOfClass("Players").LocalPlayer["Character"]:GetChildren() do
	if v:IsA("Accessory") then
		if hatnameclone[v.Name] then
			if hatnameclone[v.Name] == "s" then
				hatnameclone[v.Name] = {}
			end
			table.insert(hatnameclone[v.Name], v)
		else
			hatnameclone[v.Name] = "s"
		end
	end
end
for _, v in pairs(hatnameclone) do
	if type(v) == "table" then
		local num = 1
		for _, w in pairs(v) do
			w.Name = w.Name .. num
			num = num + 1
		end
	end
end
hatnameclone = nil
local DeadChar = game:FindFirstChildOfClass("Players").LocalPlayer.Character
local fldr = Instance.new("Folder", game:FindFirstChildOfClass("Players").LocalPlayer["Character"])
fldr.Name = "Dummy"
local CloneChar = DeadChar:Clone()
local ANIMATIONHERE
if CloneChar:FindFirstChild("Animate") then
	ANIMATIONHERE = CloneChar:FindFirstChild("Animate"):Clone()
	CloneChar:FindFirstChild("Animate"):Destroy()
end
if CloneChar:FindFirstChildOfClass("Folder") then
	CloneChar:FindFirstChildOfClass("Folder"):Destroy()
end
if CloneChar.Torso:FindFirstChild("Neck") then
	local Clonessss = CloneChar.Torso:FindFirstChild("Neck"):Clone()
	Clonessss.Part0 = nil
	Clonessss.Part1 = DeadChar.Head
	Clonessss.Parent = DeadChar.Torso
end
CloneChar.Parent = fldr
CloneChar.HumanoidRootPart.CFrame = DeadChar.HumanoidRootPart.CFrame
CloneChar.Humanoid.BreakJointsOnDeath = false
CloneChar.Name = "Dummy"
CloneChar.Humanoid.DisplayDistanceType = "None"
for _, v in next, DeadChar:GetChildren() do
	if v:IsA("Accessory") then
		local topacc = false
		if v.Handle:FindFirstChildOfClass("Weld") then
			v.Handle:FindFirstChildOfClass("Weld"):Destroy()
		end
		v.Handle.Massless = true
		v.Handle.CanCollide = false
		coroutine.wrap(function()
			if topacc then
				local allthings = Align(v.Handle, DeadChar.Torso, Vector3.new(0, 1.5, 0) + (DeadChar.Head[topacc].Position + (v.Handle[topacc].Position * -1)), Vector3.new(0, 0, 0))
				local normaltop = allthings[1].Attachment1
				local alipos = allthings[1]
				local alirot = allthings[2]
				local p0 = v.Handle
				local p1 = DeadChar.Head
				alipos.Parent = CloneChar:FindFirstChild(v.Name).Handle
				alirot.Parent = CloneChar:FindFirstChild(v.Name).Handle
				while true do
					game:GetService("RunService").RenderStepped:wait()
					if HumanDied then
						break
					end
					coroutine.wrap(function()
						if alipos.Attachment1 == normaltop then
							p0.CFrame = p0.CFrame:lerp((((DeadChar.Torso.CFrame * CFrame.new(0, 1.5, 0)) * p1[topacc].CFrame) * p0[topacc].CFrame:inverse()), 1)
						else
							v.Handle.CFrame = v.Handle.CFrame:lerp(alipos.Attachment1.Parent.CFrame * CFrame.new(alipos.Attachment1.Position) * CFrame.Angles(math.rad(alipos.Attachment1.Rotation.X), math.rad(alipos.Attachment1.Rotation.Y), math.rad(alipos.Attachment1.Rotation.Z)), 1)
						end
					end)()
				end
			else
				Align(v.Handle, CloneChar[v.Name].Handle, Vector3.new(0, 0, 0), Vector3.new(0, 0, 0))
			end
		end)()
	end
end
local a = DeadChar.Torso
local b = DeadChar.HumanoidRootPart
local c = DeadChar.Humanoid
a.Parent = game:FindFirstChildOfClass("Workspace")
c.Parent = game:FindFirstChildOfClass("Workspace")
local told = a:Clone()
local told1 = c:Clone()
b["RootJoint"].Part0 = told
b["RootJoint"].Part1 = DeadChar.Head
a.Name = "torso"
a.Neck:Destroy()
told.Parent = DeadChar
told1.Parent = DeadChar
DeadChar.PrimaryPart = told
told1.Health = 0
b:Destroy()
a.Parent = DeadChar
c.Parent = DeadChar
told:Destroy()
told1:Destroy()
a.Name = "Torso"
if CloneChar.Head:FindFirstChildOfClass("Decal") then
	CloneChar.Head:FindFirstChildOfClass("Decal").Transparency = 1
end
if DeadChar:FindFirstChild("Animate") then
	DeadChar:FindFirstChild("Animate"):Destroy()
end
local Collider
function UnCollide()
	if HumanDied then
		Collider:Disconnect();
		return
	end
	for _, Parts in next, DeadChar:GetChildren() do
		if Parts:IsA("BasePart") then
			Parts.CanCollide = false
		end
	end
end
Collider = game:GetService("RunService").Stepped:Connect(UnCollide)
local resetBindable = Instance.new("BindableEvent")
resetBindable.Event:connect(function()
	game:GetService("StarterGui"):SetCore("ResetButtonCallback", true)
	resetBindable:Destroy()
	HumanDied = true
	pcall(function()
		game:FindFirstChildOfClass("Players").LocalPlayer.Character = DeadChar
		DeadChar.Head:Destroy()
		DeadChar:FindFirstChildOfClass("Humanoid"):Destroy()
		game:FindFirstChildOfClass("Players").LocalPlayer.Character = CloneChar
		if DeadChar:FindFirstChildOfClass("Folder") then
			DeadChar:FindFirstChildOfClass("Folder"):Destroy()
		end
	end)
end)
game:GetService("StarterGui"):SetCore("ResetButtonCallback", resetBindable)
coroutine.wrap(function()
	while true do
		game:GetService("RunService").RenderStepped:wait()
		if not CloneChar or not CloneChar:FindFirstChild("Head") or not CloneChar:FindFirstChildOfClass("Humanoid") or CloneChar:FindFirstChildOfClass("Humanoid").Health <= 0 and not DeadChar or not DeadChar:FindFirstChild("Head") or not DeadChar:FindFirstChildOfClass("Humanoid") or DeadChar:FindFirstChildOfClass("Humanoid").Health <= 0 then
			HumanDied = true
			pcall(function()
				game:FindFirstChildOfClass("Players").LocalPlayer.Character = DeadChar
				DeadChar.Head:Destroy()
				DeadChar:FindFirstChildOfClass("Humanoid"):Destroy()
				game:FindFirstChildOfClass("Players").LocalPlayer.Character = CloneChar
				if DeadChar:FindFirstChildOfClass("Folder") then
					DeadChar:FindFirstChildOfClass("Folder"):Destroy()
				end
			end)
			if resetBindable then
				game:GetService("StarterGui"):SetCore("ResetButtonCallback", true)
				resetBindable:Destroy()
			end
			break
		end
	end
end)()
Align(DeadChar["Right Leg"], CloneChar["Right Leg"])
Align(DeadChar["Head"], CloneChar["Head"])
Align(DeadChar["Torso"], CloneChar["Torso"])
Align(DeadChar["Left Arm"], CloneChar["Left Arm"])
Align(DeadChar["Right Arm"], CloneChar["Right Arm"])
Align(DeadChar["Left Leg"], CloneChar["Left Leg"])
Align(DeadChar["Right Leg"], CloneChar["Right Leg"])
for _, v in pairs(DeadChar:GetChildren()) do
	if v:IsA("BasePart") and v.Name ~= "Head" then
	elseif v:IsA("BasePart") and v.Name == "Head" then
		coroutine.wrap(function()
			while true do
				game:GetService("RunService").RenderStepped:wait()
				if HumanDied then
					break
				end
				v.CFrame = DeadChar.Torso.CFrame * CFrame.new(0, 1.5, 0)
			end
		end)()
	end
end
for _, BodyParts in next, CloneChar:GetDescendants() do
	if BodyParts:IsA("BasePart") or BodyParts:IsA("Part") then
		BodyParts.Transparency = 1
	end
end
game:GetService("RunService").RenderStepped:wait()
game:FindFirstChildOfClass("Players").LocalPlayer.Character = CloneChar
game:FindFirstChildOfClass("Workspace"):FindFirstChildOfClass("Camera").CameraSubject = CloneChar.Humanoid
for _, v in next, DeadChar:GetChildren() do
	if v:IsA("Accessory") then
		if v.Handle:FindFirstChildOfClass("Weld") then
			v.Handle:FindFirstChildOfClass("Weld"):Destroy()
		end
		if v.Handle:FindFirstChildOfClass("AccessoryWeld") then
			v.Handle:FindFirstChildOfClass("AccessoryWeld"):Destroy()
		end
		if v.Handle:FindFirstChildOfClass("BodyBackAttachment") then
			v.Handle:FindFirstChildOfClass("BodyBackAttachment"):Destroy()
		end
	end
end
workspace.FallenPartsDestroyHeight = 0 / 0
local char = workspace[game.Players.LocalPlayer.Name]
local v = char.Torso
for _, v in pairs(v:GetChildren()) do
	if v:IsA("Attachment") and not string.find(v.Name:lower(), "attachment") then
		v:Destroy()
	end
end
local c = char.Dummy.Dummy.Torso
local ath = Instance.new("Attachment", c)
ath.Name = "nil"
coroutine.wrap(function()
	local con
			local function tpmeyes()
		v.CanCollide = false
		v.CFrame = c.CFrame
	end
	con = game["Run Service"].Heartbeat:connect(tpmeyes)
end)()
local bv = Instance.new("BodyVelocity", v)
bv.Velocity = Vector3.new(0, 0, 0)
bv.MaxForce = Vector3.new(0, 0, 0)
workspace.FallenPartsDestroyHeight = 0 / 0
local char = workspace[game.Players.LocalPlayer.Name]
local v = char["Right Arm"]
for _, v in pairs(v:GetChildren()) do
	if v:IsA("Attachment") and not string.find(v.Name:lower(), "attachment") then
		v:Destroy()
	end
end
local c = char.Dummy.Dummy["Right Arm"]
local ath = Instance.new("Attachment", c)
ath.Name = "nil"
coroutine.wrap(function()
	local con
			local function tpmeyes()
		v.CanCollide = false
		v.CFrame = c.CFrame
	end
	con = game["Run Service"].Heartbeat:connect(tpmeyes)
end)()
workspace.FallenPartsDestroyHeight = 0 / 0
local char = workspace[game.Players.LocalPlayer.Name]
local v = char["Left Arm"]
for _, v in pairs(v:GetChildren()) do
	if v:IsA("Attachment") and not string.find(v.Name:lower(), "attachment") then
		v:Destroy()
	end
end
local c = char.Dummy.Dummy["Left Arm"]
local ath = Instance.new("Attachment", c)
ath.Name = "nil"
coroutine.wrap(function()
	local con
			local function tpmeyes()
		v.CanCollide = false
		v.CFrame = c.CFrame
	end
	con = game["Run Service"].Heartbeat:connect(tpmeyes)
end)()
workspace.FallenPartsDestroyHeight = 0 / 0
local char = workspace[game.Players.LocalPlayer.Name]
local v = char["Left Leg"]
for _, v in pairs(v:GetChildren()) do
	if v:IsA("Attachment") and not string.find(v.Name:lower(), "attachment") then
		v:Destroy()
	end
end
local c = char.Dummy.Dummy["Left Leg"]
local ath = Instance.new("Attachment", c)
ath.Name = "nil"
coroutine.wrap(function()
	local con
			local function tpmeyes()
		v.CanCollide = false
		v.CFrame = c.CFrame
	end
	con = game["Run Service"].Heartbeat:connect(tpmeyes)
end)()
workspace.FallenPartsDestroyHeight = 0 / 0
local char = workspace[game.Players.LocalPlayer.Name]
local v = char["Right Leg"]
for _, v in pairs(v:GetChildren()) do
	if v:IsA("Attachment") and not string.find(v.Name:lower(), "attachment") then
		v:Destroy()
	end
end
local c = char.Dummy.Dummy["Right Leg"]
local ath = Instance.new("Attachment", c)
ath.Name = "nil"
coroutine.wrap(function()
	local con
			local function tpmeyes()
		v.CanCollide = false
		v.CFrame = c.CFrame
	end
	con = game["Run Service"].Heartbeat:connect(tpmeyes)
end)()
local char = workspace[game.Players.LocalPlayer.Name]
for i, hat1 in pairs(char:GetChildren()) do
	if hat1.ClassName == "Accessory" then
		workspace.FallenPartsDestroyHeight = 0 / 0
		local v = hat1.Handle
		for _, v in pairs(v:GetChildren()) do
			if v:IsA("Attachment") and not string.find(v.Name:lower(), "attachment") then
				v:Destroy()
			end
		end
		for i, hat2 in pairs(char.Dummy.Dummy:GetChildren()) do
			if hat2.Name == hat1.Name then
				local c = hat2.Handle
				local ath = Instance.new("Attachment", c)
				ath.Name = "nil"
				coroutine.wrap(function()
					local con
					local function tpmeyes()
						v.CanCollide = false
						v.CFrame = c.CFrame
					end
					con = game["Run Service"].Heartbeat:connect(tpmeyes)
				end)()
			end
		end
	end
end
local e = Animate:Clone()
e.Parent = game.Players.LocalPlayer.Character

IT = Instance.new
CF = CFrame.new
VT = Vector3.new
C3 = Color3.new
UD2 = UDim2.new
BRICKC = BrickColor.new
NS = NumberSequence.new
NSK = NumberSequenceKeypoint.new
RAY = Ray.new
CS = ColorSequence.new
NR = NumberRange.new
TI = TweenInfo.new
RAND = Random.new

ANGLES = CFrame.Angles

COS = math.cos
ACOS = math.acos
RAD = math.rad
SIN = math.sin
MRANDOM = math.random
MHUGE = math.huge
FLOOR = math.floor
SQRT = math.sqrt
CEIL = math.ceil

Character = game.Players.LocalPlayer.Character
Head = Character.Head
Torso = Character.Torso
LArm = Character["Left Arm"]
RArm = Character["Right Arm"]
LLeg = Character["Left Leg"]
RLeg = Character["Right Leg"]
Root = Character.HumanoidRootPart
Humanoid = Character:FindFirstChildOfClass("Humanoid")
Neck = Torso.Neck
RootJoint = Root.RootJoint
RightShoulder = Torso["Right Shoulder"]
LeftShoulder = Torso["Left Shoulder"]
RightHip = Torso["Right Hip"]
LeftHip = Torso["Left Hip"]

--values and other stuff

NeckOrg = CF(0,-.5,0) * ANGLES(RAD(-90),0,RAD(180))
RootJointOrg = CF(0,0,0) * ANGLES(RAD(-90),0,RAD(180))
LeftShoulderOrg = CF(.5,.5,0) * ANGLES(0,RAD(-90),0)
RightShoulderOrg = CF(-.5,.5,0) * ANGLES(0,RAD(90),0)
LeftHipOrg = CF(-.5,1,0) * ANGLES(0,RAD(-90),0)
RightHipOrg = CF(.5,1,0) * ANGLES(0,RAD(90),0)

sine = 0

frame = 1/60
tf = 0
lastframe = tick()
	
ArtificialHB = IT("BindableEvent", script)
ArtificialHB.Name = "ArtificialHB"

script.ArtificialHB:Fire()

game["Run Service"].Heartbeat:Connect(function(s,p)
	tf = tf + s
	if tf >= frame then
		for i=1,FLOOR(tf/frame) do
			script.ArtificialHB:Fire()
		end
		lastframe = tick()
		tf = tf - frame * FLOOR(tf/frame)
	end
end)

for _,v in pairs(Character:GetDescendants()) do
	if (v ~= script and v:IsA("Script") or v:IsA("Attachment") or v:IsA("Sound") or v:IsA("Clothing") or v:IsA("ShirtGraphic") or v:IsA("Accoutrement") or v:IsA("Decal")) then
		v:Destroy()
	end
end
Humanoid:ClearAllChildren()

local bc = Character["Body Colors"]
bc.HeadColor = BRICKC("Royal purple")
bc.TorsoColor = BRICKC("Royal purple")
bc.LeftArmColor = BRICKC("Royal purple")
bc.RightArmColor = BRICKC("Royal purple")
bc.LeftLegColor = BRICKC("Royal purple")
bc.RightLegColor = BRICKC("Royal purple")

local f = IT("Decal",Head)
f.Texture = "rbxassetid://2782621578"
f.Face = "Front"

local s = IT("Sound",Root)
s.SoundId = "rbxassetid://4948825058"
s.Looped = true
s.Volume = 10
s:Play()

function Clerp(joint,cf)
	joint.C1 = joint.C1:Lerp(cf,1)
end

function swait(NUMBER)
	if NUMBER == 0 or NUMBER == nil then
		ArtificialHB.Event:Wait()
	else
		for i=1,NUMBER do
			ArtificialHB.Event:Wait()
		end
	end
end

while true do
	--sine = sine + .07
	for i=1,9 do swait()
		Clerp(Neck,NeckOrg * ANGLES(RAD(15),0,0))
		Clerp(RootJoint,RootJointOrg * ANGLES(RAD(-15),0,0))
		Clerp(LeftShoulder,LeftShoulderOrg * ANGLES(0,0,RAD(105)))
		Clerp(RightShoulder,(RightShoulderOrg * ANGLES(0,0,RAD(-105)) + VT(0,.5,0)))
		Clerp(LeftHip,(LeftHipOrg * ANGLES(0,RAD(-10),RAD(15))) + VT(0,0,.5))
		Clerp(RightHip,(RightHipOrg * ANGLES(0,RAD(10),RAD(-15))) + VT(0,0,.5))
	end
	for i=1,8 do swait()
		Clerp(Neck,(NeckOrg * ANGLES(RAD(15),0,0)) + VT(0,0,.5))
		Clerp(RootJoint,(RootJointOrg * ANGLES(RAD(-15),0,0)) + VT(0,.5,0))
		Clerp(LeftShoulder,(LeftShoulderOrg * ANGLES(0,0,RAD(105))) + VT(0,.15,0))
		Clerp(RightShoulder,RightShoulderOrg * ANGLES(0,0,RAD(-105)))
		Clerp(LeftHip,(LeftHipOrg * ANGLES(0,RAD(-10),RAD(15))) + VT(0,-.5,.85))
		Clerp(RightHip,(RightHipOrg * ANGLES(0,RAD(10),RAD(-15))) + VT(0,-.5,.85))
	end
	for i=1,8 do swait()
		Clerp(Neck,(NeckOrg * ANGLES(RAD(15),0,0)) + VT(0,0,.25))
		Clerp(RootJoint,(RootJointOrg * ANGLES(RAD(-15),0,0)) + VT(0,.75,0))
		Clerp(LeftShoulder,(LeftShoulderOrg * ANGLES(0,0,RAD(105))) + VT(0,.25,0))
		Clerp(RightShoulder,(RightShoulderOrg * ANGLES(0,0,RAD(-105))) - VT(0,.45,0))
		Clerp(LeftHip,(LeftHipOrg * ANGLES(0,RAD(-10),RAD(15))) + VT(0,-.75,1))
		Clerp(RightHip,(RightHipOrg * ANGLES(0,RAD(10),RAD(-15))) + VT(0,-.75,1))
	end
	for i=1,8 do swait()
		Clerp(Neck,(NeckOrg * ANGLES(RAD(15),0,0)) + VT(0,0,.5))
		Clerp(RootJoint,(RootJointOrg * ANGLES(RAD(-15),0,0)) + VT(0,.5,0))
		Clerp(LeftShoulder,(LeftShoulderOrg * ANGLES(0,0,RAD(105))) + VT(0,.15,0))
		Clerp(RightShoulder,RightShoulderOrg * ANGLES(0,0,RAD(-105)))
		Clerp(LeftHip,(LeftHipOrg * ANGLES(0,RAD(-10),RAD(15))) + VT(0,-.5,.85))
		Clerp(RightHip,(RightHipOrg * ANGLES(0,RAD(10),RAD(-15))) + VT(0,-.5,.85))
	end
	for i=1,9 do swait()
		Clerp(Neck,NeckOrg * ANGLES(RAD(15),0,0))
		Clerp(RootJoint,RootJointOrg * ANGLES(RAD(-15),0,0))
		Clerp(LeftShoulder,LeftShoulderOrg * ANGLES(0,0,RAD(105)))
		Clerp(RightShoulder,(RightShoulderOrg * ANGLES(0,0,RAD(-105)) + VT(0,.5,0)))
		Clerp(LeftHip,(LeftHipOrg * ANGLES(0,RAD(-10),RAD(15))) + VT(0,0,.5))
		Clerp(RightHip,(RightHipOrg * ANGLES(0,RAD(10),RAD(-15))) + VT(0,0,.5))
	end
	for i=1,8 do swait()
		Clerp(Neck,(NeckOrg * ANGLES(RAD(15),0,0)) + VT(0,0,.5))
		Clerp(RootJoint,(RootJointOrg * ANGLES(RAD(-15),0,0)) + VT(0,.5,0))
		Clerp(LeftShoulder,(LeftShoulderOrg * ANGLES(0,0,RAD(105))) + VT(0,.15,0))
		Clerp(RightShoulder,RightShoulderOrg * ANGLES(0,0,RAD(-105)))
		Clerp(LeftHip,(LeftHipOrg * ANGLES(0,RAD(-10),RAD(15))) + VT(0,-.5,.85))
		Clerp(RightHip,(RightHipOrg * ANGLES(0,RAD(10),RAD(-15))) + VT(0,-.5,.85))
	end
	for i=1,8 do swait()
		Clerp(Neck,NeckOrg * ANGLES(RAD(15),0,0))
		Clerp(RootJoint,(RootJointOrg * ANGLES(RAD(-15),0,0)) + VT(0,1,0))
		Clerp(LeftShoulder,(LeftShoulderOrg * ANGLES(0,0,RAD(105))) + VT(0,.35,0))
		Clerp(RightShoulder,(RightShoulderOrg * ANGLES(0,0,RAD(-105))) - VT(0,.5,0))
		Clerp(LeftHip,(LeftHipOrg * ANGLES(0,RAD(-10),RAD(15))) + VT(0,-.85,1.2))
		Clerp(RightHip,(RightHipOrg * ANGLES(0,RAD(10),RAD(-15))) + VT(0,-.85,1.2))
	end
	for i=1,8 do swait()
		Clerp(Neck,(NeckOrg * ANGLES(RAD(15),0,0)) + VT(0,0,.5))
		Clerp(RootJoint,(RootJointOrg * ANGLES(RAD(-15),0,0)) + VT(0,.5,0))
		Clerp(LeftShoulder,(LeftShoulderOrg * ANGLES(0,0,RAD(105))) + VT(0,.15,0))
		Clerp(RightShoulder,RightShoulderOrg * ANGLES(0,0,RAD(-105)))
		Clerp(LeftHip,(LeftHipOrg * ANGLES(0,RAD(-10),RAD(15))) + VT(0,-.5,.85))
		Clerp(RightHip,(RightHipOrg * ANGLES(0,RAD(10),RAD(-15))) + VT(0,-.5,.85))
	end
end
